	COMPILATION LISTING OF SEGMENT init_early_config
        1	/****^  ***********************************************************
        2	        *                                                         *
        3	        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        4	        *                                                         *
        5	        * Copyright, (C) Honeywell Bull Inc., 1987                *
        6	        *                                                         *
        7	        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        8	        *                                                         *
        9	        *********************************************************** */
       10	
       11	/* format: style2 */
       12	
       13	init_early_config:
       14	     procedure;
       15	
       16	/* *	This procedure is called very early in initialization to construct a
       17	   *	"template" config deck which can then be used to construct a version
       18	   *	of the Multics environment with which the real config deck can readily
       19	   *	be found. This config deck includes the following cards, which are
       20	   *	constructed from information acquired from the bootload dialogue or
       21	   *	from a survey of equipment.
       22	   *
       23	   *	A typical initial config deck might look like this:
       24	   *
       25	   *	  (c)   cpu   a  7	on  l68.  80.
       26	   *	  (c)   mem   a  512.  on
       27	   *	  (a)   iom   a  0  iom  on
       28	   *	  (a)   prph  opca  a  20  6601.  80.  on
       29	   *	  (b)   prph  dska	24.  1.  0.  6  451.  7
       30	   *	  (b)   root  dska	7.
       31	   *	  (d)   clok  0. gmt  0.
       32	   *	  (d)   sst   50.  25.  10.  4.
       33	   *	  (d)   tcd   4.  20.  20.
       34	   *	  (d)   intk  warm	0  boot
       35	   *        (b)   prph  tapa  a  20.  1.  0.  3.  610.  1.
       36	   *
       37	   *	Those cards marked (a) are generated from a "hardware survey"; that is, from
       38	   *	information which is read from hardware registers or the IOM bootload program
       39	   *	during the bootload process. Those cards marked (b) are constructed from
       40	   *	information gathered during the bootload dialogue, or compiled into bootload_info.
       41	   *	The cards marked (c) are modified after this program runs.
       42	   *
       43	   *	11/15/80, W. Olin Sibert
       44	   *	Modified 01/07/81, WOS, to move some stuff to scs_and_clock_init.
       45	   *      Updated BIM 9/82
       46	   *	Modified 1/11/84, Keith Loepere, for new format opc prph card.
       47	   *	Modified 7/30/84, Paul Farley, for FIPS support.
       48	   *	Modified 8/84, Chris Jones, for new disk dim.
       49	   *	Modified 9/84, Keith Loepere, to build prph dsk card correct for
       50	   *		shared spindle devices.
       51	   *	Modified 2/25/85, Paul Farley, to add "fips" card when needed.
       52	   */
       53	
       54	/****^  HISTORY COMMENTS:
       55	  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
       56	     audit(86-01-17,CLJones), install(86-03-21,MR12.0-1033):
       57	     FIPS support.
       58	  2) change(86-01-09,Fawcett), approve(86-04-11,MCR7383),
       59	     audit(86-07-07,GDixon), install(86-07-17,MR12.0-1097):
       60	     Add subvolume support for MSU3380 and MSU3390.
       61	  3) change(86-01-09,Fawcett), approve(86-04-11,MCR7351),
       62	     audit(86-07-07,GDixon), install(86-07-17,MR12.0-1097):
       63	     Change for iom_card model field from nsa to iom.
       64	  4) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
       65	     audit(86-06-12,Martinson), install(86-07-17,MR12.0-1091):
       66	     Correct error message documentation.
       67	  5) change(87-04-09,Farley), approve(87-07-06,MCR7717),
       68	     audit(87-07-13,Lippard), install(87-07-17,MR12.1-1043):
       69	     Changed default prph dska card to be "0. 62. 501. 2." instead of "0. 63.
       70	     451. 1." to allow handling of the extra device for 500/501s.
       71	  6) change(87-10-02,Farley), approve(88-02-26,MCR7794),
       72	     audit(88-03-04,Fawcett), install(88-03-15,MR12.2-1035):
       73	     Added code for the proper setting of the IOM model field on the IOM config
       74	     card, based on the setting of the flag sys_boot_info$imu_style_iom.
       75	  7) change(87-10-20,Farley), approve(88-02-26,MCR7795),
       76	     audit(88-03-04,Fawcett), install(88-03-15,MR12.2-1035):
       77	     Added code to set the clok card zone field to the value contained in
       78	     sys_boot_info$default_time_zone.
       79	  8) change(89-08-14,Farley), approve(89-09-18,MCR8133),
       80	     audit(89-09-20,WAAnderson), install(89-10-03,MR12.3-1081):
       81	     Added check for device zero when checking for FIPS tape devices. Looking
       82	     for a "tape_mpc_fw_name" of "ipc" is not adequate, given that a change was
       83	     made to skip the "Enter boot tape MPC model" question if the controller
       84	     was found to be in an intelligent state.
       85	                                                   END HISTORY COMMENTS */
       86	
       87	
       88		declare idx		 fixed bin;
       89		declare 1 card_image	 aligned like config_card;
       90		declare disk_iom		 fixed bin (3);
       91		declare disk_channel	 fixed bin (7);
       92		declare disk_num		 fixed bin;
       93		declare sub_num		 fixed bin;
       94		declare p99		 pic "99";
       95		declare part		 char (4) aligned;
       96		declare lowest_dev_number	 fixed bin (17);
       97	
       98		declare sys_boot_info$bootload_mem_size
       99					 fixed bin (35) ext;
      100	
      101		declare sys_boot_info$console_iom_number
      102					 fixed bin (3) ext;
      103		declare sys_boot_info$console_channel_number
      104					 fixed bin (6) ext;
      105		declare sys_boot_info$console_model
      106					 fixed bin (35) ext;
      107		declare sys_boot_info$default_time_zone
      108					 char (4) unaligned ext;
      109		declare sys_boot_info$tape_iom_number
      110					 fixed bin (3) ext;
      111		declare sys_boot_info$tape_channel_number
      112					 fixed bin (6) ext;
      113		declare sys_boot_info$tape_device_number
      114					 fixed bin (6) ext;
      115		declare sys_boot_info$tape_mpc_fw_name
      116					 char (32) ext;
      117	
      118		declare sys_boot_info$iom_port_table
      119					 (4) fixed bin (35) ext;
      120		declare sys_boot_info$imu_style_iom
      121					 bit (1) aligned external static;
      122		declare sys_boot_info$disk_mpc_chanid
      123					 character (8) aligned external static;
      124		declare sys_boot_info$disk_device_has_sv
      125					 bit (1) aligned external static;
      126		declare sys_boot_info$disk_device_sv
      127					 fixed bin (17) external static;
      128		declare sys_boot_info$disk_device_number
      129					 fixed bin (6) ext;
      130		declare sys_boot_info$disk_model_number
      131					 fixed bin (35) ext;
      132	
      133	
      134	
      135		declare config_$clear	 entry ();
      136		declare config_$add		 entry (pointer, pointer);
      137		declare config_$find_2	 entry (char (4) aligned, char (4) aligned, ptr);
      138		declare config_$find	 entry (char (4) aligned, ptr);
      139		declare config_$delete	 entry (ptr);
      140		declare cv_config_card_	 entry (char (*), pointer, fixed bin (35));
      141		declare syserr		 entry options (variable);
      142	
      143		declare (addr, convert, dimension, divide, null, round, substr)
      144					 builtin;
      145	
      146	/* */
      147	
      148		call config_$clear ();			/* Clear out anything that's "there" now. */
      149	
      150		call make_card ("cpu a 0 on l68 80.", cpu_cardp); /* CPU card. Always CPU A. */
      151		call config_$add (cpu_cardp, null ());
      152	
      153		do idx = 1 to 4;
      154		     if sys_boot_info$iom_port_table (idx) >= 0
      155		     then do;
      156			     call make_card ("iom a 0 iom on", iom_cardp);
      157			     iom_card.tag = idx;
      158			     iom_card.port = sys_boot_info$iom_port_table (idx);
      159			     if sys_boot_info$imu_style_iom
      160			     then iom_card.model = "imu";
      161			     call config_$add (iom_cardp, null ());
      162			end;
      163		end;
      164	
      165		call make_card ("mem a 256. on", mem_cardp);	/* Bootload memory is always 256K first time through */
      166		mem_card.size = divide (sys_boot_info$bootload_mem_size, 1024, 26, 0);
      167		call config_$add (mem_cardp, null ());
      168	
      169		call make_card ("prph opca a 13. 6001. 80. on", prph_opc_cardp);
      170							/* OPC card for BOS console */
      171		prph_opc_card.chan = sys_boot_info$console_channel_number;
      172		prph_opc_card.iom = sys_boot_info$console_iom_number;
      173		prph_opc_card.model = sys_boot_info$console_model;
      174	
      175		call config_$add (prph_opc_cardp, null ());
      176	
      177		if substr (sys_boot_info$tape_mpc_fw_name, 1, 3) = "ipc" | sys_boot_info$tape_device_number = 0
      178		then do;					/* FIPS device */
      179			if sys_boot_info$tape_device_number = 0
      180			then call make_card ("prph tapa a 13. 1. 610. 1.", prph_tap_cardp);
      181			else do;
      182				call make_card ("prph tapa a 13. 1. 0. 0. 610. 1.", prph_tap_cardp);
      183				prph_tap_card.group (1).ndrives = sys_boot_info$tape_device_number;
      184			     end;
      185		     end;
      186		else do;					/* else devices start at 1. */
      187			if sys_boot_info$tape_device_number = 1
      188			then call make_card ("prph tapa a 13. 1. 610. 1.", prph_tap_cardp);
      189			else do;
      190				call make_card ("prph tapa a 13. 1. 0. 0. 610. 1.", prph_tap_cardp);
      191				prph_tap_card.group (1).ndrives = sys_boot_info$tape_device_number - 1;
      192			     end;
      193		     end;
      194		prph_tap_card.iom = sys_boot_info$tape_iom_number;
      195		prph_tap_card.chan = sys_boot_info$tape_channel_number;
      196		call config_$add (prph_tap_cardp, null ());
      197	
      198		call add_card ("prph dska a 13. 1. 0. 62. 501. 2.");
      199							/* make chantab slot and disk_seg devtab slots */
      200	
      201		call make_card ("clok 0. gmt 0.", clok_cardp);
      202		clok_card.zone = sys_boot_info$default_time_zone;
      203		call config_$add (clok_cardp, null ());
      204	
      205	
      206		call add_card ("sst 50. 25. 10. 4.");		/* Add the "constant" cards */
      207		call add_card ("tcd 4. 20. 20.");
      208		call add_card ("intk warm 0 boot");
      209		call add_card ("parm chwm hcpt");
      210		call add_card ("root dska 13");
      211		call make_card ("part dump dska 13", part_cardp);
      212		call config_$add (part_cardp, null ());
      213		do part = "bos", "conf", "log";
      214		     part_card.name = part;
      215		     call config_$add (part_cardp, null ());
      216		end;
      217		return;					/* All done */
      218	
      219	/* Enter here after sys_boot_info is known to contain the good data */
      220	/* on the RPV subsystem. */
      221	
      222	disk:
      223	     entry;
      224	
      225		root_cardp = null ();
      226		call config_$find (ROOT_CARD_WORD, root_cardp);
      227		disk_num = sys_boot_info$disk_device_number;
      228		sub_num = sys_boot_info$disk_device_sv;
      229		if sys_boot_info$disk_device_has_sv
      230		then root_card.volume (1).drive = convert (p99, disk_num) || valid_sv_array (sub_num);
      231		else root_card.volume (1).drive = convert (p99, disk_num);
      232	
      233		do part = "bos", "conf", "log", "dump";
      234		     part_cardp = null ();
      235		     call config_$find_2 (PART_CARD_WORD, part, part_cardp);
      236		     if sys_boot_info$disk_device_has_sv
      237		     then part_card.drive = convert (p99, disk_num) || valid_sv_array (sub_num);
      238		     else part_card.drive = convert (p99, disk_num);
      239		end;
      240	
      241		prph_dsk_cardp = null ();
      242		call config_$find_2 ("prph", "dska", prph_dsk_cardp);
      243							/* remove the dummy card put in to get channel slots */
      244		call config_$delete (prph_dsk_cardp);
      245	
      246		call io_chnl_util$name_to_iom (sys_boot_info$disk_mpc_chanid, disk_iom, disk_channel, (0));
      247							/* guaranteed ok */
      248	
      249	/* Find RPV device type so we can see if the rpv is a shared spindle device
      250	(requires defining both halves) */
      251	
      252		do idx = 1 to dimension (MODEL, 1) while (MODEL (idx) ^= sys_boot_info$disk_model_number);
      253		end;
      254		idx = MODELX (idx);				/* device type */
      255		if IS_FIPS_DEVICE ()
      256		then lowest_dev_number = 0;
      257		else lowest_dev_number = 1;
      258	
      259	/* Of devices that are supported by Multics none are both fips and shared_spindle */
      260	
      261		if shared_spindle (idx)
      262		then do;
      263			if sys_boot_info$disk_device_number <= (lowest_dev_number + 1)
      264			then do;
      265				call make_card ("prph dska a 13. 1. 1. 2.", prph_dsk_cardp);
      266				prph_dsk_card.group (1).model = sys_boot_info$disk_model_number;
      267			     end;
      268			else do;
      269				call make_card ("prph dska a 13. 1. 0. 1. 1. 2.", prph_dsk_cardp);
      270				prph_dsk_card.group (1).ndrives =
      271				     round (sys_boot_info$disk_device_number, -1) - (lowest_dev_number + 1);
      272				prph_dsk_card.group (2).model = sys_boot_info$disk_model_number;
      273			     end;
      274		     end;
      275		else do;
      276			if sys_boot_info$disk_device_number = lowest_dev_number
      277			then do;
      278				call make_card ("prph dska a 13. 1. 1. 1.", prph_dsk_cardp);
      279				prph_dsk_card.group (1).model = sys_boot_info$disk_model_number;
      280			     end;
      281			else do;
      282				call make_card ("prph dska a 13. 1. 0. 1. 1. 1.", prph_dsk_cardp);
      283				prph_dsk_card.group (1).ndrives = sys_boot_info$disk_device_number - lowest_dev_number;
      284				prph_dsk_card.group (2).model = sys_boot_info$disk_model_number;
      285			     end;
      286		     end;
      287		prph_dsk_card.iom = disk_iom;
      288		prph_dsk_card.chan = disk_channel;
      289		call config_$add (prph_dsk_cardp, null ());
      290	
      291		return;
      292	
      293	
      294	add_card:
      295	     proc (P_card);
      296	
      297	/* This procedure adds a single card to the config deck, by converting it and calling config_$add */
      298	
      299		declare (
      300		        P_card		 char (*) varying,
      301		        P_cardp		 pointer
      302		        )			 parameter;
      303	
      304		declare code		 fixed bin (35);
      305	
      306	
      307		call cv_config_card_ ((P_card), addr (card_image), code);
      308		if code ^= 0
      309		then call syserr (CRASH, "init_early_config: Cannot add card to config deck: ^a", P_card);
      310	
      311		call config_$add (addr (card_image), null ());
      312	
      313		return;					/* End of add_card */
      314	
      315	
      316	make_card:
      317	     entry (P_card, P_cardp);
      318	
      319	/* This entry converts a string to a config card image, and sets P_cardp to point to it. */
      320	
      321		call cv_config_card_ ((P_card), addr (card_image), code);
      322		if code ^= 0
      323		then call syserr (CRASH, "init_early_config: Cannot add card to config deck: ^a", P_card);
      324	
      325		P_cardp = addr (card_image);
      326		return;					/* End of add_card */
      327	
      328	     end add_card;
      329	
      330	
      331	IS_FIPS_DEVICE:
      332	     proc () returns (bit (1));
      333	
      334	/*     The theory here is all drives on a channel must be either fips or non
      335	       fips, but not mixed. Therefore look at sys_boot_info$disk_model_number
      336	       and check config_data_ for device_0_valid  */
      337	
      338		dcl     i			 fixed bin;
      339	
      340		do i = 1 to config_data_$disk_drive_model_names.count;
      341		     if config_data_$disk_drive_model_names.names (i).model = sys_boot_info$disk_model_number
      342		     then return (config_data_$disk_drive_model_names.names (i).device_0_valid);
      343		end;
      344		return ("0"b);
      345	     end IS_FIPS_DEVICE;				/* format: off */
      346	%page; %include config_data_dcls;
      347	%page; %include config_deck;
      348	%page; %include config_clok_card;
      349	%page; %include config_iom_card;
      350	%page; %include config_intk_card;
      351	%page; %include config_cpu_card;
      352	%page; %include config_mem_card;
      353	%page; %include config_part_card;
      354	%page; %include config_prph_opc_card;
      355	%page; %include config_prph_tap_card;
      356	%page; %include config_prph_dsk_card;
      357	%page; %include config_mpc_card;
      358	%page; %include config_root_card;
      359	%page; %include fs_dev_types;
      360	%page; %include io_chnl_util_dcls;
      361	%page; %include syserr_constants;
      362	%page;
      363	
      364	/* BEGIN MESSAGE DOCUMENTATION
      365	
      366	   Message:
      367	   init_early_config: Cannot add card to config deck: CARD.
      368	
      369	   S: $crash
      370	
      371	   T: $init
      372	
      373	   M: The config_deck being generated during the early (hardware inspection)
      374	   pass of bce is damaged.  This can be either a hardware or software
      375	   problem.
      376	
      377	   A: $reboot
      378	
      379	   END MESSAGE DOCUMENTATION */
      380	
      381		end init_early_config;
SOURCE FILES USED

THIS FILE IS DAMAGED

          internal static fixed bin(4,0)           initial dcl 14-43
msu0450devt                            internal static fixed bin(4,0)           initial dcl 14-43
msu0451devt                            internal static fixed bin(4,0)           initial dcl 14-43
msu0500devt                            internal static fixed bin(4,0)           initial dcl 14-43
msu0501devt                            internal static fixed bin(4,0)           initial dcl 14-43
needs_alt_part                         internal static bit(1)                   initial array packed unaligned dcl 14-81
number_of_sv                           internal static fixed bin(17,0)          initial array dcl 14-93
prph_dsk_card_array                    based           structure                level 1 dcl 11-21
prph_tap_card_array                    based           structure                level 1 dcl 10-21
rec_per_cyl                            internal static fixed bin(17,0)          initial array dcl 14-108
rec_per_dev                            internal static fixed bin(21,0)          initial array dcl 14-87
rec_per_sv                             internal static fixed bin(17,0)          initial array dcl 14-90
root_card_array                        based           structure                level 1 dcl 13-29
sect_per_cyl                           internal static fixed bin(17,0)          initial array dcl 15-15
sect_per_rec                           internal static fixed bin(17,0)          initial array dcl 15-21
sect_per_sv                            internal static fixed bin(24,0)          initial array dcl 15-18
sect_per_track                         internal static fixed bin(17,0)          initial array dcl 15-33
sect_per_vtoc                          internal static fixed bin(17,0)          initial array dcl 15-26
tracks_per_cyl                         internal static fixed bin(17,0)          initial array dcl 14-111
valid_sv_string                        internal static char(3)                  initial packed unaligned dcl 14-96
vtoc_per_rec                           internal static fixed bin(17,0)          initial array dcl 15-29
words_per_sect                         internal static fixed bin(17,0)          initial array dcl 15-36

NAMES DECLARED BY EXPLICIT CONTEXT.
IS_FIPS_DEVICE                  001677 constant        entry                    internal dcl 331 ref 255
add_card                        001457 constant        entry                    internal dcl 294 ref 198 206 207 208 209 210
disk                            001034 constant        entry                    external dcl 222
init_early_config               000346 constant        entry                    external dcl 13
make_card                       001574 constant        entry                    internal dcl 316 ref 150 156 165 169 179 182 187 190
                                                                                  201 211 265 269 278 282

THERE WERE NO NAMES DECLARED BY CONTEXT OR IMPLICATION.

STORAGE REQUIREMENTS FOR THIS PROGRAM.

	Object	Text	Link	Symbol	Defs	Static
Start          0       0      2502        2574    2152        2512
Length      3420    2152        72         607     327           0

BLOCK NAME	         STACK SIZE     TYPE		WHY NONQUICK/WHO SHARES STACK FRAME
init_early_config                   205 external procedure  is an external procedure.  
add_card                                internal procedure  shares stack frame of external procedure init_early_config.  
IS_FIPS_DEVICE                          internal procedure  shares stack frame of external procedure init_early_config.  

STORAGE FOR AUTOMATIC VARIABLES.

STACK FRAME                 LOC IDENTIFIER                  BLOCK NAME
init_early_config        000100 idx                         init_early_config
                         000101 card_image                  init_early_config
                         000121 disk_iom                    init_early_config
                         000122 disk_channel                init_early_config
                         000123 disk_num                    init_early_config
                         000124 sub_num                     init_early_config
                         000125 part                        init_early_config
                         000126 lowest_dev_number           init_early_config
                         000130 clok_cardp                  init_early_config
                         000132 iom_cardp                   init_early_config
                         000134 cpu_cardp                   init_early_config
                         000136 mem_cardp                   init_early_config
                         000140 part_cardp                  init_early_config
                         000142 prph_opc_cardp              init_early_config
                         000144 prph_tap_cardp              init_early_config
                         000146 prph_dsk_cardp              init_early_config
                         000150 root_cardp                  init_early_config
                         000152 seek_command                init_early_config
                         000170 code                        add_card
                         000200 i                           IS_FIPS_DEVICE

THE FOLLOWING EXTERNAL OPERATORS ARE USED BY THIS PROGRAM.
alloc_char_temp     call_ext_out_desc   call_ext_out        return_mac          shorten_stack       ext_entry
round_fx1

THE FOLLOWING EXTERNAL ENTRIES ARE CALLED BY THIS PROGRAM.
config_$add                   config_$clear                 config_$delete                config_$find
config_$find_2                cv_config_card_               io_chnl_util$name_to_iom      syserr

THE FOLLOWING EXTERNAL VARIABLES ARE USED BY THIS PROGRAM.
config_data_$disk_drive_model_names                         sys_boot_info$bootload_mem_size
sys_boot_info$console_channel_number                        sys_boot_info$console_iom_number
sys_boot_info$console_model   sys_boot_info$default_time_zone
sys_boot_info$disk_device_has_sv                            sys_boot_info$disk_device_number
sys_boot_info$disk_device_sv  sys_boot_info$disk_model_number                             sys_boot_info$disk_mpc_chanid
sys_boot_info$imu_style_iom   sys_boot_info$iom_port_table  sys_boot_info$tape_channel_number
sys_boot_info$tape_device_number                            sys_boot_info$tape_iom_number
sys_boot_info$tape_mpc_fw_name




   LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC      LINE    LOC   
                      13 000345       148 000354       150 000361       151 000371       153 000404       154 000411
    156 000415       157 000425       158 000430       159 000434       161 000440       163 000452       165 000454
    166 000464       167 000471       169 000503       171 000513       172 000517       173 000521       175 000523
    177 000535       179 000544       182 000557       183 000567       185 000573       187 000574       190 000607
    191 000617       194 000624       195 000630       196 000632       198 000644       201 000654       202 000664
    203 000670       206 000702       207 000712       208 000722       209 000732       210 000742       211 000752
    212 000762       213 000775       214 001001       215 001004       216 001017       217 001032       222 001033
    225 001042       226 001044       227 001055       228 001060       229 001062       231 001106       233 001122
    234 001126       235 001130       236 001143       238 001171       239 001205       241 001225       242 001227
    244 001246       246 001255       252 001273       253 001305       254 001307       255 001312       257 001321
    261 001323       263 001330       265 001335       266 001345       267 001351       269 001352       270 001362
    272 001375       274 001377       276 001400       278 001404       279 001414       280 001420       282 001421
    283 001431       284 001436       287 001440       288 001442       289 001444       291 001456       294 001457
    307 001470       308 001525       311 001556       313 001573       316 001574       321 001605       322 001642
    325 001673       326 001676       331 001677       340 001701       341 001711       343 001730       344 001732


                                          -----------------------------------------------------------


Historical Background

This edition of the Multics software materials and documentation is provided and donated
to Massachusetts Institute of Technology by Group BULL including BULL HN Information Systems Inc. 
as a contribution to computer science knowledge.  
This donation is made also to give evidence of the common contributions of Massachusetts Institute of Technology,
Bell Laboratories, General Electric, Honeywell Information Systems Inc., Honeywell BULL Inc., Groupe BULL
and BULL HN Information Systems Inc. to the development of this operating system. 
Multics development was initiated by Massachusetts Institute of Technology Project MAC (1963-1970),
renamed the MIT Laboratory for Computer Science and Artificial Intelligence in the mid 1970s, under the leadership
of Professor Fernando Jose Corbato. Users consider that Multics provided the best software architecture 
for managing computer hardware properly and for executing programs. Many subsequent operating systems 
incorporated Multics principles.
Multics was distributed in 1975 to 2000 by Group Bull in Europe , and in the U.S. by Bull HN Information Systems Inc., 
as successor in interest by change in name only to Honeywell Bull Inc. and Honeywell Information Systems Inc. .

                                          -----------------------------------------------------------

Permission to use, copy, modify, and distribute these programs and their documentation for any purpose and without
fee is hereby granted,provided that the below copyright notice and historical background appear in all copies
and that both the copyright notice and historical background and this permission notice appear in supporting
documentation, and that the names of MIT, HIS, BULL or BULL HN not be used in advertising or publicity pertaining
to distribution of the programs without specific prior written permission.
    Copyright 1972 by Massachusetts Institute of Technology and Honeywell Information Systems Inc.
    Copyright 2006 by BULL HN Information Systems Inc.
    Copyright 2006 by Bull SAS
    All Rights Reserved
