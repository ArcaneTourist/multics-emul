# Makefile for the sources to the Multics emulator.
# Creates multics.a.
# See ../Makefile for one that drives library builds for SIMH and
# decNumber as well as creating the executable.

CC = gcc -std=c99

# Use make DEBUG=1 to disable optimization

CFLAGS += -pedantic -Wall
CFLAGS += -Wextra -Wno-unused-parameter -Wno-missing-field-initializers
CFLAGS += -Wno-sign-compare	# enabled by -Wextra, but we need cleanup
CFLAGS += -Wno-unused-variable -Wno-unused-but-set-variable # until we cleanup...
CFLAGS += -Wno-variadic-macros -Wno-long-long	# non-std features we use
CFLAGS += -D_GNU_SOURCE	# (SIMH uses this)
CFLAGS += -U__STRICT_ANSI__	# we want some exensions (and SIMH uses this)
CFLAGS += -Wno-unused-function	# flex generates some...
CFLAGS += -g
ifneq ($(DEBUG),)
CFLAGS += -O0 -g
else
CFLAGS += -O3
endif
CFLAGS += -march=native	# faster executable
CFLAGS += -pipe			# faster compile
CFLAGS += -DUSE_INT64 -DUSE_ADDR64	# affects SIMH typedefs
CFLAGS += -I ../simh -I ../decNumber
# CFLAGS += -O1 -pg

CXX = g++ -std=c++0x	# g++ 4.6 doesn't know -std=c++11 yet :-(
CXXFLAGS =

YACC = bison
LFLAGS =
YFLAGS = -d

.SUFFIXES: .tab.c .tab.h .yy.c

.c.o:
	@echo $(CC) \$$CFLAGS -c -o $@ $<
	@$(CC) $(CFLAGS) -c -o $@ $<

.cpp.o:
	@echo $(CXX) \$$CFLAGS $(CXXFLAGS) -c -o $@ $<
	@$(CXX) $(CFLAGS) $(CXXFLAGS) -c -o $@ $<

.l.yy.c:
	$(LEX) $(LFLAGS) -P yy$(subst -,_,$*)_ $<
	mv -f lex.yy$(subst -,_,$*)_.c $@

%.tab.h %.tab.c: %.y
	$(YACC) $(YFLAGS) -p yy$(subst -,_,$*)_ $<
	@# mv -f y.tab.c $*.tab.c
	@# mv -f y.tab.h $*.tab.h

default: cflags multics.a
	@

# Our patterns hide the long list of $(CFLAGS), so we display them here
cflags:
	@echo "***"
	@echo "*** CFLAGS are $(CFLAGS)"
	@echo "***"
	@echo

multics.a: seginfo.o seginfo_run.o debug_run.o debug_io.o listing.o hw6180_cpu.o hw6180_sys.o opcode_text.o misc.o opu.o eis_opu.o bitstream.o apu.o eis_desc.o scu.o iom.o mt.o disk.o math.o math_real.o console.o
# symtab.o
	ar cr $@ $?

# A crude measure of the size of the code base
wc:
	wc hw6180.h seginfo.hpp bit36.h bitstream.h eis.hpp \
	seginfo.cpp seginfo_run.cpp debug_run.cpp debug_io.cpp listing.cpp hw6180_cpu.c hw6180_sys.c misc.c opu.c eis_opu.cpp bitstream.c apu.c eis_desc.cpp scu.c iom.c mt.c disk.c math.c math_real.c console.c

# A measure of how complete the OPU is
opcode-count:
	@echo `grep -n 'case opcode._[a-z0-9]*:' opu.c | grep -cv ' + 0:'` of `grep -c 'opcode._.*=' opcodes.h`

t: t.c
	gcc -o t t.c

malm: malm.tab.o malm.yy.o malm.o opcode_text.o
	$(CXX) -o $@ $^

malm.o: *.h

malm.yy.o: malm.tab.h

alm-list: alm-list.tab.o alm-list.o alm-list.yy.o
	$(CXX) -o $@ $^

alm-list.tab.o: *.h
alm-list.o: *.h
alm-list.yy.o: alm-list.tab.h

printmem: printmem.o bitstream.o


hw6180.h: opcodes.h

hw6180_cpu.o: *.h
hw6180_sys.o: *.h seginfo.hpp
opcode_text.o: *.h
misc.o: *.h seginfo.hpp
opu.o: *.h
eis_opu.o: *.h eis.hpp
eis_desc.o: *.h eis.hpp
bitstream.o: *.h
apu.o: *.h
scu.o: *.h
iom.o: *.h iom.hincl
mt.o: *.h
disk.o: *.h
math.o: *.h
math_real.o: *.h
console.o: *.h
#symtab.o: *.h
listing.o: *.h seginfo.hpp
seginfo.o: *.h seginfo.hpp
seginfo_run.o: *.h seginfo.hpp
debug_run.o: *.h *.hpp
debug_io.o: *.h *.hpp
scan-tape.o: opcodes.h

bit-test.o: *.h
bit-test: bit-test.o bitstream.o
scan-tape: scan-tape.o bitstream.o opcode_text.o
mtst: mtst.o math.o misc.o
	$(CC) $(CFLAGS) $(LDFLAGS) -lgmp -o $@ mtst.o math.o misc.o
#tst: tst.o misc.o
#	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ tst.o misc.o
tst: tst.o
	$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $?

realclean: clean
	rm -f opcodes.h opcode_text.c

clean:
	rm -f *.o multics.a
	@#rm -f y.tab.h y.tab.c lex.yy.c
	@#rm -f malm.tab.h malm.tab.c malm.yy.c
	@#rm -f alm-list.tab.h alm-list.tab.c alm-list.yy.c
	rm -f *.tab.h *.tab.c *.yy.c
	rm -f *.bin
	rm -f `/bin/ls | sed -ne 's/\.alm$$/.lst/p'`
	rm -f alm-list
	rm -f bits bit-test tst test-op scan-tape a.out cctst malm

opcodes.h: opcodes0.txt opcodes1.txt opcodes2c.pl
	echo "// This file is automatically generated by opcodes2c.pl" > .tmpf
	./opcodes2c.pl | sed -ne '/^#ifndef/q' -e p >> .tmpf && mv .tmpf $@
opcode_text.c: opcodes0.txt opcodes1.txt opcodes2c.pl
	echo "// This file is automatically generated by opcodes2c.pl" > .tmpf
	./opcodes2c.pl | sed -ne '/^#ifndef/,$$p' >> .tmpf && mv .tmpf $@

init_early_config.reconstructed.list: init_early_config.damaged.list init_early_config.pl1
	nl -ba init_early_config.pl1 | sed -e 's/^/   /' > .tmp.init_early_config.list
	echo "SOURCE FILES USED" >> .tmp.init_early_config.list
	echo "" >> .tmp.init_early_config.list
	tr -d '\000' < init_early_config.damaged.list | sed -e 's/^14   84 000254/     84 000254/' >> .tmp.init_early_config.list
	mv .tmp.init_early_config.list init_early_config.reconstructed.list
